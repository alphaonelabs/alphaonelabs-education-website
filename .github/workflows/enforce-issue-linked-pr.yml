name: Enforce Issue-Linked PRs

on:
  pull_request_target:
    types: [opened, reopened, edited, synchronize]

permissions:
  pull-requests: write
  issues: read

jobs:
  check-issue-link:
    runs-on: ubuntu-latest
    name: Check PR has linked issue
    steps:
      - name: Verify PR has linked issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const repo = context.repo;

            console.log(`Checking PR #${prNumber} for linked issues`);

            // Check for exempt labels that don't require issue links
            const exemptLabels = ['dependencies', 'documentation', 'typo', 'ci', 'chore'];
            const hasExemptLabel = pr.labels && pr.labels.some(label => exemptLabels.includes(label.name.toLowerCase()));

            if (hasExemptLabel) {
              console.log(`PR has exempt label, skipping issue link check`);
              return;
            }

            // Check for exempt prefixes in the PR title
            const exemptPrefixes = ['docs:', 'chore:', 'deps:', 'ci:'];
            if (exemptPrefixes.some(prefix => pr.title.toLowerCase().startsWith(prefix))) {
              console.log(`PR has exempt prefix in title, skipping issue link check`);
              return;
            }

            // Check if the PR directly has linked issues in the "Development" section
            // This uses the GraphQL API to check for linked issues
            try {
              const query = `
                query($owner:String!, $repo:String!, $pr_number:Int!) {
                  repository(owner:$owner, name:$repo) {
                    pullRequest(number:$pr_number) {
                      closingIssuesReferences(first:10) {
                        nodes {
                          number
                          title
                        }
                      }
                    }
                  }
                }
              `;

              const variables = {
                owner: repo.owner,
                repo: repo.repo,
                pr_number: prNumber
              };

              const result = await github.graphql(query, variables);
              const linkedIssues = result.repository.pullRequest.closingIssuesReferences.nodes;

              if (linkedIssues && linkedIssues.length > 0) {
                console.log(`Found ${linkedIssues.length} linked issues in the Development section:`);
                for (const issue of linkedIssues) {
                  console.log(`- Issue #${issue.number}: ${issue.title}`);
                }
                return;
              }
            } catch (error) {
              console.log(`Error checking linked issues via GraphQL API: ${error.message}`);
              // Continue with other checks
            }

            // Fallback to REST API for linked items if GraphQL fails
            try {
              const { data: linkedItems } = await github.rest.pulls.listLinkedItems({
                owner: repo.owner,
                repo: repo.repo,
                pull_number: prNumber,
              });

              // Fix the filter logic with proper parentheses
              const linkedIssues = linkedItems.items.filter(item =>
                item.type === 'ISSUE' && (item.link_type === 'CLOSING' || item.link_type === 'LINKED')
              );

              if (linkedIssues.length > 0) {
                console.log(`Found ${linkedIssues.length} linked issues via REST API`);
                for (const issue of linkedIssues) {
                  console.log(`- Issue #${issue.number}: ${issue.title}`);
                }
                return;
              }
            } catch (error) {
              console.log(`Error checking linked items via REST API: ${error.message}`);
              // Continue with other checks
            }

            // Check PR body for direct issue references like #123 or user/repo#123
            const bodyIssueReferences = pr.body ? pr.body.match(/#[0-9]+/g) : [];
            if (bodyIssueReferences && bodyIssueReferences.length > 0) {
              console.log(`Found issue references in PR body: ${bodyIssueReferences.join(', ')}`);
              return;
            }

            // Check for issue references using various keywords in title or body
            const issueKeywords = [
              'fix', 'fixes', 'fixed',
              'close', 'closes', 'closed',
              'resolve', 'resolves', 'resolved',
              'implement', 'implements', 'implemented',
              'address', 'addresses', 'addressed',
              'relate', 'relates', 'related'
            ];

            // Check in title
            for (const keyword of issueKeywords) {
              const regex = new RegExp(`${keyword}\\s+#([0-9]+)`, 'i');
              const match = pr.title.match(regex);
              if (match) {
                console.log(`Found issue reference in PR title with keyword "${keyword}": #${match[1]}`);
                return;
              }
            }

            // Check in body
            if (pr.body) {
              for (const keyword of issueKeywords) {
                const regex = new RegExp(`${keyword}\\s+#([0-9]+)`, 'i');
                const match = pr.body.match(regex);
                if (match) {
                  console.log(`Found issue reference in PR body with keyword "${keyword}": #${match[1]}`);
                  return;
                }
              }
            }

            // Check if PR is linked to any issues using GitHub's timeline API
            try {
              const { data: linkedIssues } = await github.rest.issues.listEventsForTimeline({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
              });

              const issueRefs = linkedIssues.filter(event =>
                event.event === "cross-referenced" &&
                event.source &&
                event.source.type === "issue"
              );

              if (issueRefs.length > 0) {
                console.log(`Found ${issueRefs.length} linked issues via GitHub references`);
                return;
              }
            } catch (error) {
              console.log(`Error checking linked issues via timeline API: ${error.message}`);
              // Continue with the check, don't fail the workflow if this specific check fails
            }

            // Check if PR author is a bot or has specific permissions that might exempt them
            if (pr.user.type === 'Bot') {
              console.log(`PR author is a bot, skipping issue link requirement`);
              return;
            }

            // Special exception for repository maintainers for quick fixes
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: repo.owner,
                repo: repo.repo,
                username: pr.user.login,
              });

              if (permission.permission === 'admin' && pr.title.toLowerCase().includes('hotfix')) {
                console.log(`Admin user submitted a hotfix PR, allowing without issue link`);
                return;
              }
            } catch (error) {
              console.log(`Error checking permission level: ${error.message}`);
              // Continue with check
            }

            // If we get here, no linked issue was found
            console.log(`No linked issues found for PR #${prNumber}. Closing PR.`);

            const closeComment = `
            ## ðŸš¨ Missing Issue Link

            This pull request appears to not reference any GitHub issue.

            As per our workflow requirements, all PRs should address an existing issue. This ensures:

            - Changes are properly tracked
            - Work is discussed before implementation
            - Code reviews are more focused

            ### How to Fix This

            Please link this PR to an existing issue using one of these methods:

            1. Reference the issue in your PR description: "Fixes #123" or "Addresses #123"
            2. Use GitHub's interface to link the PR to an issue in the Development section
               - Look for the section that says "Development" on the right side of your PR
               - Click "Link an issue" or "Link issues"
               - Select the relevant issue(s)
            3. If no issue exists yet, please create one first

            This PR will be automatically closed. Feel free to reopen it once you've linked it to an issue or added appropriate labels.

            Thank you for your contribution!
            `;

            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: closeComment
            });

            await github.rest.pulls.update({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber,
              state: 'closed'
            });
