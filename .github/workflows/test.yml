name: Tests

on:
  push:
  pull_request:

# Add permissions needed for commenting on PRs
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python3.10.x
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.x
        cache: 'pip'

    - name: Run pre-commit hooks
      id: pre-commit
      run: |
        pip install pre-commit black isort flake8 djlint
        #pre-commit autoupdate
        pre-commit install
        pre-commit run --all-files

  tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_db
          MYSQL_USER: django
          MYSQL_PASSWORD: django_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python3.10.x
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.x
        cache: 'pip'

    - name: Configure MySQL and run tests
      env:
        DATABASE_URL: mysql://root:rootpassword@127.0.0.1:3306/test_db
      run: |
        cp .env.sample .env
        sed -i 's|DATABASE_URL=sqlite:///db.sqlite3|DATABASE_URL=mysql://root:rootpassword@127.0.0.1:3306/test_db|g' .env
        
        # Install MySQL client
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev
        
        # Install Python dependencies
        python -m pip install --upgrade pip wheel setuptools
        pip install -v -r requirements.txt
        pip install mysqlclient
        
        # Configure MySQL with less restrictive SQL mode
        mysql -h127.0.0.1 -P3306 -uroot -prootpassword -e "SET GLOBAL sql_mode='NO_ENGINE_SUBSTITUTION';"
        
        # Create a temporary Django settings file that handles the MySQL subquery issue
        cat > mysql_settings.py << EOF
from web.settings import *

# Override database settings to use MySQL with specific options
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test_db',
        'USER': 'root',
        'PASSWORD': 'rootpassword',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'sql_mode': 'NO_ENGINE_SUBSTITUTION',
            'charset': 'utf8mb4',
        },
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        }
    }
}
EOF
        
        # Run tests with the custom settings file
        DJANGO_SETTINGS_MODULE=mysql_settings python manage.py test

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python3.10.x
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.x
        cache: 'pip'

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check
