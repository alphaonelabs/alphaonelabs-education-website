# Generated by Django 5.1.6 on 2025-03-24 17:45

import django.db.models.deletion
from django.conf import settings
from django.db import ProgrammingError, connections, migrations, models
from django.db.migrations.operations.special import SeparateDatabaseAndState
from django.utils.text import slugify


def generate_slugs(apps, schema_editor):
    MembershipPlan = apps.get_model("web", "MembershipPlan")
    for plan in MembershipPlan.objects.all():
        plan.slug = slugify(plan.name)
        plan.save()


def check_slug_column_exists(apps, schema_editor):
    """Check if slug column already exists in membershipplan table and log its status"""
    # Get the database connection
    connection = connections[schema_editor.connection.alias]
    cursor = connection.cursor()

    # Check if the column exists in the table
    try:
        # Different SQL syntax depending on the database backend
        if connection.vendor == "mysql":
            cursor.execute(
                "SELECT COUNT(*) FROM information_schema.columns "
                "WHERE table_name = 'web_membershipplan' AND column_name = 'slug'"
            )
        elif connection.vendor == "sqlite":
            cursor.execute("PRAGMA table_info(web_membershipplan)")
            columns = [column[1] for column in cursor.fetchall()]
            slug_exists = "slug" in columns
            # Print result for SQLite and return
            print(f"Slug column exists in web_membershipplan: {slug_exists}")
            return
        else:
            # PostgreSQL
            cursor.execute(
                "SELECT COUNT(*) FROM information_schema.columns "
                "WHERE table_name = 'web_membershipplan' AND column_name = 'slug'"
            )

        # For MySQL and PostgreSQL, get the result
        if connection.vendor != "sqlite":
            slug_exists = cursor.fetchone()[0] > 0

        # If the column doesn't exist, we do nothing - the migration will add it
        # If it exists, we'll modify later migrations or ignore this one
        print(f"Slug column exists in web_membershipplan: {slug_exists}")

    except ProgrammingError:
        # If table doesn't exist yet, we do nothing
        pass


class Migration(migrations.Migration):

    dependencies = [
        ("web", "0043_alter_studygroup_members_studygroupinvite"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Create MembershipPlan model using SeparateDatabaseAndState to handle existing table
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="MembershipPlan",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("name", models.CharField(max_length=100)),
                        ("slug", models.SlugField(blank=True, max_length=100, null=True, unique=True)),
                        ("description", models.TextField()),
                        ("features", models.JSONField(blank=True, default=list)),
                        ("price_monthly", models.DecimalField(decimal_places=2, max_digits=10)),
                        ("price_yearly", models.DecimalField(decimal_places=2, max_digits=10)),
                        ("stripe_monthly_price_id", models.CharField(blank=True, max_length=100, default="")),
                        ("stripe_yearly_price_id", models.CharField(blank=True, max_length=100, default="")),
                        ("order", models.PositiveIntegerField(default=0, help_text="Order in which to display the plan")),
                        ("is_active", models.BooleanField(default=True)),
                        ("is_popular", models.BooleanField(default=False)),
                        (
                            "billing_period",
                            models.CharField(
                                choices=[("monthly", "Monthly"), ("yearly", "Yearly"), ("both", "Both")],
                                default="monthly",
                                max_length=10,
                            ),
                        ),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("updated_at", models.DateTimeField(auto_now=True)),
                    ],
                    options={
                        "ordering": ["order", "price_monthly"],
                    },
                ),
            ],
            database_operations=[],
        ),
        
        # Create UserMembership model with SeparateDatabaseAndState
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="UserMembership",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("stripe_subscription_id", models.CharField(max_length=100)),
                        (
                            "status",
                            models.CharField(
                                choices=[
                                    ("active", "Active"),
                                    ("past_due", "Past Due"),
                                    ("canceled", "Canceled"),
                                    ("trialing", "Trialing"),
                                    ("incomplete", "Incomplete"),
                                    ("incomplete_expired", "Incomplete Expired"),
                                    ("unpaid", "Unpaid"),
                                ],
                                default="active",
                                max_length=20,
                            ),
                        ),
                        (
                            "billing_period",
                            models.CharField(
                                choices=[("monthly", "Monthly"), ("yearly", "Yearly")], default="monthly", max_length=10
                            ),
                        ),
                        ("start_date", models.DateTimeField()),
                        ("end_date", models.DateTimeField(blank=True, null=True)),
                        ("cancel_at_period_end", models.BooleanField(default=False)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("updated_at", models.DateTimeField(auto_now=True)),
                        (
                            "plan",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.PROTECT,
                                related_name="subscriptions",
                                to="web.membershipplan",
                            ),
                        ),
                        (
                            "user",
                            models.OneToOneField(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="membership",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                ),
            ],
            database_operations=[],
        ),
        
        # Create MembershipSubscriptionEvent model with SeparateDatabaseAndState
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="MembershipSubscriptionEvent",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        (
                            "event_type",
                            models.CharField(
                                choices=[
                                    ("created", "Created"),
                                    ("updated", "Updated"),
                                    ("canceled", "Canceled"),
                                    ("reactivated", "Reactivated"),
                                    ("payment_succeeded", "Payment Succeeded"),
                                    ("payment_failed", "Payment Failed"),
                                    ("past_due", "Past Due"),
                                ],
                                max_length=20,
                            ),
                        ),
                        ("stripe_event_id", models.CharField(blank=True, max_length=100, default="")),
                        ("data", models.JSONField(blank=True, default=dict)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        (
                            "user",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="membership_events",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "membership",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="events",
                                to="web.usermembership",
                            ),
                        ),
                    ],
                    options={
                        "ordering": ["-created_at"],
                    },
                ),
            ],
            database_operations=[],
        ),
        
        # Run the Python functions from migrations 0045 and 0047
        migrations.RunPython(generate_slugs, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(check_slug_column_exists, reverse_code=migrations.RunPython.noop),
    ] 