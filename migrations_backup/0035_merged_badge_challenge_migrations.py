# Generated by Django 5.1.6 on 2025-03-25 04:25

import uuid

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.db.migrations.operations.special import SeparateDatabaseAndState


class Migration(migrations.Migration):

    dependencies = [
        ("web", "0034_profile_is_profile_public"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]
    
    # This is a merged migration for all badge, challenge, and profile related migrations (0035-0043)
    # Using SeparateDatabaseAndState to avoid affecting existing databases that have already applied these migrations
    
    operations = [
        # Badge and UserBadge (from 0035)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="Badge",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("name", models.CharField(max_length=100)),
                        ("description", models.TextField()),
                        ("image", models.ImageField(upload_to="badges/")),
                        (
                            "badge_type",
                            models.CharField(
                                choices=[
                                    ("challenge", "Challenge Completion"),
                                    ("course", "Course Completion"),
                                    ("achievement", "Special Achievement"),
                                    ("teacher_awarded", "Teacher Awarded"),
                                ],
                                max_length=20,
                            ),
                        ),
                        ("is_active", models.BooleanField(default=True)),
                        ("criteria", models.JSONField(blank=True, default=dict)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("updated_at", models.DateTimeField(auto_now=True)),
                        (
                            "challenge",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="badges",
                                to="web.challenge",
                            ),
                        ),
                        (
                            "course",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="badges",
                                to="web.course",
                            ),
                        ),
                        (
                            "created_by",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="created_badges",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                    options={
                        "ordering": ["badge_type", "name"],
                    },
                ),
                migrations.CreateModel(
                    name="UserBadge",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        (
                            "award_method",
                            models.CharField(
                                choices=[
                                    ("challenge_completion", "Challenge Completion"),
                                    ("course_completion", "Course Completion"),
                                    ("teacher_awarded", "Teacher Awarded"),
                                    ("system_awarded", "System Awarded"),
                                ],
                                max_length=20,
                            ),
                        ),
                        ("awarded_at", models.DateTimeField(auto_now_add=True)),
                        ("award_message", models.TextField(blank=True)),
                        (
                            "awarded_by",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.SET_NULL,
                                related_name="awarded_badges",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "badge",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, related_name="awarded_to", to="web.badge"
                            ),
                        ),
                        (
                            "challenge_submission",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.SET_NULL,
                                related_name="badges",
                                to="web.challengesubmission",
                            ),
                        ),
                        (
                            "course_enrollment",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.SET_NULL,
                                related_name="badges",
                                to="web.enrollment",
                            ),
                        ),
                        (
                            "user",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, related_name="badges", to=settings.AUTH_USER_MODEL
                            ),
                        ),
                    ],
                    options={
                        "ordering": ["-awarded_at"],
                        "unique_together": {("user", "badge")},
                    },
                ),
            ],
            database_operations=[],
        ),
        
        # PeerChallenge and PeerChallengeInvitation (from 0036)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="PeerChallenge",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("title", models.CharField(max_length=200)),
                        ("description", models.TextField()),
                        ("start_date", models.DateTimeField()),
                        ("end_date", models.DateTimeField()),
                        ("is_active", models.BooleanField(default=True)),
                        ("is_private", models.BooleanField(default=False)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("updated_at", models.DateTimeField(auto_now=True)),
                        (
                            "created_by",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="created_peer_challenges",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "participants",
                            models.ManyToManyField(
                                blank=True, related_name="peer_challenges", to=settings.AUTH_USER_MODEL
                            ),
                        ),
                        (
                            "related_course",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.SET_NULL,
                                related_name="peer_challenges",
                                to="web.course",
                            ),
                        ),
                    ],
                    options={
                        "ordering": ["-created_at"],
                    },
                ),
                migrations.CreateModel(
                    name="PeerChallengeInvitation",
                    fields=[
                        ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                        ("email", models.EmailField(blank=True, max_length=254, null=True)),
                        ("message", models.TextField(blank=True)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("accepted_at", models.DateTimeField(blank=True, null=True)),
                        (
                            "status",
                            models.CharField(
                                choices=[("pending", "Pending"), ("accepted", "Accepted"), ("declined", "Declined")],
                                default="pending",
                                max_length=20,
                            ),
                        ),
                        (
                            "challenge",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="invitations",
                                to="web.peerchallenge",
                            ),
                        ),
                        (
                            "invited_by",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="sent_peer_challenge_invitations",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "recipient",
                            models.ForeignKey(
                                blank=True,
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="received_peer_challenge_invitations",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                ),
            ],
            database_operations=[],
        ),
        
        # Profile how_did_you_hear_about_us field (from 0037)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="profile",
                    name="how_did_you_hear_about_us",
                    field=models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            database_operations=[],
        ),
        
        # CourseMaterial fields updates (from 0038)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="coursematerial",
                    name="due_date",
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name="coursematerial",
                    name="duration_minutes",
                    field=models.PositiveIntegerField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name="enrollment",
                    name="completed_materials",
                    field=models.ManyToManyField(blank=True, related_name="completed_by", to="web.coursematerial"),
                ),
                migrations.AddField(
                    model_name="enrollment",
                    name="last_activity_date",
                    field=models.DateTimeField(auto_now=True, null=True),
                ),
                migrations.CreateModel(
                    name="MaterialProgress",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("progress_percent", models.PositiveSmallIntegerField(default=0)),
                        ("is_completed", models.BooleanField(default=False)),
                        ("started_at", models.DateTimeField(auto_now_add=True)),
                        ("completed_at", models.DateTimeField(blank=True, null=True)),
                        ("last_accessed_at", models.DateTimeField(auto_now=True)),
                        (
                            "enrollment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="material_progress",
                                to="web.enrollment",
                            ),
                        ),
                        (
                            "material",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="progress",
                                to="web.coursematerial",
                            ),
                        ),
                    ],
                    options={
                        "unique_together": {("enrollment", "material")},
                    },
                ),
            ],
            database_operations=[],
        ),
        
        # NoteHistory model (from 0039)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="NoteHistory",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("content", models.TextField()),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        (
                            "enrollment",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, related_name="note_history", to="web.enrollment"
                            ),
                        ),
                        (
                            "created_by",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="note_history_entries",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                    options={
                        "ordering": ["-created_at"],
                    },
                ),
            ],
            database_operations=[],
        ),
        
        # Challenge and submission updates (from 0040-0041)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="challengesubmission",
                    name="points_awarded",
                    field=models.PositiveIntegerField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name="challenge",
                    name="challenge_type",
                    field=models.CharField(
                        choices=[("weekly", "Weekly Challenge"), ("bonus", "Bonus Challenge")],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                migrations.AlterField(
                    model_name="challenge",
                    name="week_number",
                    field=models.PositiveIntegerField(blank=True, null=True),
                ),
                migrations.CreateModel(
                    name="PeerReview",
                    fields=[
                        ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                        ("rating", models.PositiveSmallIntegerField(choices=[(1, "1 Star"), (2, "2 Stars"), (3, "3 Stars"), (4, "4 Stars"), (5, "5 Stars")])),
                        ("comment", models.TextField()),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("updated_at", models.DateTimeField(auto_now=True)),
                        (
                            "reviewer",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="reviews_given",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "submission",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="peer_reviews",
                                to="web.challengesubmission",
                            ),
                        ),
                    ],
                    options={
                        "ordering": ["-created_at"],
                        "unique_together": {("submission", "reviewer")},
                    },
                ),
            ],
            database_operations=[],
        ),
        
        # Profile avatar accessories (from 0042)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="profile",
                    name="avatar_accessories",
                    field=models.CharField(blank=True, max_length=50, null=True),
                ),
                migrations.AddField(
                    model_name="profile",
                    name="avatar_background",
                    field=models.CharField(blank=True, max_length=50, null=True),
                ),
                migrations.AddField(
                    model_name="profile",
                    name="avatar_body",
                    field=models.CharField(blank=True, max_length=50, null=True),
                ),
                migrations.AddField(
                    model_name="profile",
                    name="avatar_face",
                    field=models.CharField(blank=True, max_length=50, null=True),
                ),
                migrations.AddField(
                    model_name="profile",
                    name="avatar_hair",
                    field=models.CharField(blank=True, max_length=50, null=True),
                ),
            ],
            database_operations=[],
        ),
        
        # StudyGroup members and StudyGroupInvite (from 0043)
        SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="studygroup",
                    name="members",
                    field=models.ManyToManyField(blank=True, related_name="joined_groups", to=settings.AUTH_USER_MODEL),
                ),
                migrations.CreateModel(
                    name="StudyGroupInvite",
                    fields=[
                        ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                        ("created_at", models.DateTimeField(auto_now_add=True)),
                        ("responded_at", models.DateTimeField(blank=True, null=True)),
                        (
                            "status",
                            models.CharField(
                                choices=[("pending", "Pending"), ("accepted", "Accepted"), ("declined", "Declined")],
                                default="pending",
                                max_length=20,
                            ),
                        ),
                        (
                            "group",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, related_name="invites", to="web.studygroup"
                            ),
                        ),
                        (
                            "recipient",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="received_group_invites",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                        (
                            "sender",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="sent_group_invites",
                                to=settings.AUTH_USER_MODEL,
                            ),
                        ),
                    ],
                    options={
                        "unique_together": {("group", "recipient")},
                    },
                ),
            ],
            database_operations=[],
        ),
    ] 