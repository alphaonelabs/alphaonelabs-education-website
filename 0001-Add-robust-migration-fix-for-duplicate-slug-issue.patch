From 552045cd4060d78105efcd5a816ece0b5d174a73 Mon Sep 17 00:00:00 2001
From: GautamSharmaaa <GAUTAM.SHRM7004@GMAIL.COM>
Date: Mon, 24 Mar 2025 23:00:49 +0530
Subject: [PATCH] Add robust migration fix for duplicate slug issue

---
 .../0047_fix_duplicate_slug_migration.py      | 57 +++++++++++++++++++
 1 file changed, 57 insertions(+)
 create mode 100644 web/migrations/0047_fix_duplicate_slug_migration.py

diff --git a/web/migrations/0047_fix_duplicate_slug_migration.py b/web/migrations/0047_fix_duplicate_slug_migration.py
new file mode 100644
index 0000000..c15f78d
--- /dev/null
+++ b/web/migrations/0047_fix_duplicate_slug_migration.py
@@ -0,0 +1,57 @@
+# Generated by Django 5.1.6 on 2025-03-24 17:30
+
+from django.db import migrations, connections, ProgrammingError
+
+
+def check_slug_column_exists(apps, schema_editor):
+    """Check if slug column already exists in membershipplan table and create or modify as needed"""
+    # Get the database connection
+    connection = connections[schema_editor.connection.alias]
+    cursor = connection.cursor()
+    
+    # Check if the column exists in the table
+    try:
+        # Different SQL syntax depending on the database backend
+        if connection.vendor == 'mysql':
+            cursor.execute(
+                "SELECT COUNT(*) FROM information_schema.columns "
+                "WHERE table_name = 'web_membershipplan' AND column_name = 'slug'"
+            )
+        elif connection.vendor == 'sqlite':
+            cursor.execute('PRAGMA table_info(web_membershipplan)')
+            columns = [column[1] for column in cursor.fetchall()]
+            slug_exists = 'slug' in columns
+            # Return early for SQLite since we already know the result
+            return 
+        else:
+            # PostgreSQL
+            cursor.execute(
+                "SELECT COUNT(*) FROM information_schema.columns "
+                "WHERE table_name = 'web_membershipplan' AND column_name = 'slug'"
+            )
+        
+        # For MySQL and PostgreSQL, get the result
+        if connection.vendor != 'sqlite':
+            slug_exists = cursor.fetchone()[0] > 0
+        
+        # If the column doesn't exist, we do nothing - the migration will add it
+        # If it exists, we'll modify later migrations or ignore this one
+        print(f"Slug column exists in web_membershipplan: {slug_exists}")
+        
+    except ProgrammingError:
+        # If table doesn't exist yet, we do nothing
+        pass
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ("web", "0046_alter_membershipplan_order_alter_membershipplan_slug"),
+    ]
+
+    operations = [
+        migrations.RunPython(
+            check_slug_column_exists,
+            reverse_code=migrations.RunPython.noop
+        ),
+    ]
-- 
2.47.1

