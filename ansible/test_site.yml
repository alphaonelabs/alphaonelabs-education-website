---
- hosts: production
  become: yes
  vars:
    project_name: "{{ lookup('env', 'PROJECT_NAME') | default('education-website', true) }}"
    vps_user: "{{ lookup('env', 'VPS_USER') | default('ubuntu', true) }}"
    domain_name: "{{ lookup('env', 'DOMAIN_NAME') | default('', true) }}"
    app_port: "{{ lookup('env', 'APP_PORT') | default('8000', true) }}"

  tasks:
    - name: Test Django shell access
      shell: |
        source venv/bin/activate
        python manage.py shell -c "
        from django.contrib.auth import get_user_model;
        User = get_user_model();
        print(f'User model: {User}');
        print(f'User table exists: {User._meta.db_table}');
        print(f'Total users: {User.objects.count()}')
        "
      args:
        chdir: "/root/{{ project_name }}"
        executable: /bin/bash
      become_user: "{{ vps_user }}"
      register: shell_test

    - name: Display shell test results
      debug:
        var: shell_test.stdout_lines

    - name: Test website response via domain
      uri:
        url: "{% if domain_name %}https://{{ domain_name }}{% else %}http://localhost{% endif %}"
        method: GET
        status_code: 200
      register: website_test
      ignore_errors: yes
      when: domain_name

    - name: Test website response via localhost
      uri:
        url: "http://localhost:{{ app_port }}"
        method: GET
        status_code: 200
      register: localhost_test
      ignore_errors: yes

    - name: Display website test results
      debug:
        msg: "Website status (domain): {{ website_test.status if website_test.status is defined else 'N/A' }} - {{ website_test.msg if website_test.msg is defined else 'Not tested' }}"
      when: domain_name

    - name: Display localhost test results
      debug:
        msg: "Website status (localhost): {{ localhost_test.status if localhost_test.status is defined else 'Failed' }} - {{ localhost_test.msg if localhost_test.msg is defined else 'Connection failed' }}"

    - name: Check recent service logs
      command: "journalctl -u {{ project_name }}.service -n 20 --no-pager"
      register: service_logs
      ignore_errors: yes

    - name: Display recent service logs
      debug:
        var: service_logs.stdout_lines

    - name: Check service status
      command: "systemctl status {{ project_name }} --no-pager"
      register: service_status
      ignore_errors: yes

    - name: Display service status
      debug:
        var: service_status.stdout_lines