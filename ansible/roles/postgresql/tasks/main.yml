---
- name: Install PostgreSQL packages
  apt:
    name:
      - postgresql
      - postgresql-contrib
      - python3-psycopg2
      - libpq-dev
    state: present
  when: ansible_os_family == "Debian"

- name: Start and enable PostgreSQL
  systemd:
    name: postgresql
    state: started
    enabled: yes
  ignore_errors: "{{ ansible_check_mode }}"

- name: Wait for PostgreSQL to be ready
  wait_for:
    port: 5432
    timeout: 30
  when: not ansible_check_mode
  ignore_errors: yes

- name: Find PostgreSQL version
  shell: "ls /etc/postgresql/ | head -1"
  register: postgresql_version_result
  failed_when: false
  changed_when: false

- name: Set PostgreSQL version fact
  set_fact:
    postgresql_version: "{{ postgresql_version_result.stdout if postgresql_version_result.stdout != '' else '15' }}"

- name: Create database user
  postgresql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    role_attr_flags: CREATEDB,NOSUPERUSER
  become_user: postgres
  ignore_errors: "{{ ansible_check_mode }}"

- name: Create database
  postgresql_db:
    name: "{{ db_name }}"
    owner: "{{ db_user }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
  become_user: postgres
  ignore_errors: "{{ ansible_check_mode }}"

- name: Grant database privileges
  postgresql_privs:
    database: "{{ db_name }}"
    roles: "{{ db_user }}"
    privs: ALL
    type: database
    grant_option: yes
  become_user: postgres
  ignore_errors: "{{ ansible_check_mode }}"

- name: Configure PostgreSQL authentication
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    regexp: "^local\\s+{{ db_name }}\\s+{{ db_user }}"
    line: "local   {{ db_name }}   {{ db_user }}   md5"
    backup: yes
  notify: restart postgresql
  ignore_errors: "{{ ansible_check_mode }}"

- name: Configure PostgreSQL settings
  lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: yes
  loop:
    - { regexp: '^#?listen_addresses', line: "listen_addresses = 'localhost'" }
    - { regexp: '^#?max_connections', line: 'max_connections = 100' }
    - { regexp: '^#?shared_buffers', line: 'shared_buffers = 128MB' }
  notify: restart postgresql
  ignore_errors: "{{ ansible_check_mode }}"

- name: Create database backup script
  template:
    src: backup_db.sh.j2
    dest: "{{ backup_path }}/backup_db.sh"
    mode: '0755'
    owner: "{{ project_user }}"
    group: "{{ project_user }}"

- name: Set up database backup cron job
  cron:
    name: "Backup {{ project_name }} database"
    minute: "0"
    hour: "2"
    job: "{{ backup_path }}/backup_db.sh"
    user: "{{ project_user }}" 