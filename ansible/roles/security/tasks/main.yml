---
# Security role tasks
- name: Reset UFW to defaults
  ufw:
    state: reset
  become: yes

- name: Set UFW default policies
  ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
  become: yes

- name: Allow SSH
  ufw:
    rule: allow
    port: '22'
    proto: tcp
  become: yes

- name: Allow HTTP
  ufw:
    rule: allow
    port: '80'
    proto: tcp
  become: yes

- name: Allow HTTPS
  ufw:
    rule: allow
    port: '443'
    proto: tcp
  become: yes
  when: enable_ssl | default(false)

- name: Allow application port
  ufw:
    rule: allow
    port: "{{ app_port }}"
    proto: tcp
  become: yes

- name: Enable UFW
  ufw:
    state: enabled
  become: yes

- name: Install fail2ban
  apt:
    name: fail2ban
    state: present
    update_cache: yes
  become: yes

- name: Check if fail2ban jail.conf exists
  stat:
    path: /etc/fail2ban/jail.conf
  register: jail_conf_exists
  become: yes

- name: Copy fail2ban jail configuration
  copy:
    src: /etc/fail2ban/jail.conf
    dest: /etc/fail2ban/jail.local
    remote_src: yes
    backup: yes
  become: yes
  when: jail_conf_exists.stat.exists

- name: Create basic fail2ban jail.local if jail.conf doesn't exist
  copy:
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 5

      [sshd]
      enabled = true
      port = ssh
      logpath = /var/log/auth.log
      maxretry = 3

      [nginx-http-auth]
      enabled = true
      port = http,https
      logpath = /var/log/nginx/error.log

      [nginx-limit-req]
      enabled = true
      port = http,https
      logpath = /var/log/nginx/error.log
      maxretry = 10
    dest: /etc/fail2ban/jail.local
    backup: yes
  become: yes
  when: not jail_conf_exists.stat.exists

- name: Enable and start fail2ban
  systemd:
    name: fail2ban
    enabled: yes
    state: started
    daemon_reload: yes
  become: yes
  ignore_errors: "{{ ansible_check_mode }}"

- name: Configure SSH security
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    backup: yes
  loop:
    - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin yes' }
    - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication yes' }
    - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    - { regexp: '^#?AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
  become: yes
  notify: restart ssh

- name: Set up automatic security updates
  apt:
    name: unattended-upgrades
    state: present
  when: ansible_os_family == "Debian" 