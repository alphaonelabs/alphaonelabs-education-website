# Generated by Django 5.1.6 on 2025-03-25 04:45

import uuid

import django.core.validators
import django.db.models.deletion
import markdownx.models
from django.conf import settings
from django.db import migrations, models

import web.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Avatar",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("style", models.CharField(default="circle", max_length=50)),
                ("background_color", models.CharField(default="#FFFFFF", max_length=7)),
                ("top", models.CharField(default="short_flat", max_length=50)),
                ("eyebrows", models.CharField(default="default", max_length=50)),
                ("eyes", models.CharField(default="default", max_length=50)),
                ("nose", models.CharField(default="default", max_length=50)),
                ("mouth", models.CharField(default="default", max_length=50)),
                ("facial_hair", models.CharField(default="none", max_length=50)),
                ("skin_color", models.CharField(default="light", max_length=50)),
                ("hair_color", models.CharField(default="#000000", max_length=7)),
                ("accessory", models.CharField(default="none", max_length=50)),
                ("clothing", models.CharField(default="hoodie", max_length=50)),
                ("clothing_color", models.CharField(default="#0000FF", max_length=7)),
                ("svg", models.TextField(blank=True, help_text="Stored SVG string of the custom avatar")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ForumCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("slug", models.SlugField(unique=True)),
                ("icon", models.CharField(help_text="Font Awesome icon class", max_length=50)),
                ("order", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "Forum Categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Goods",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="Product title (e.g., 'Algebra Basics Workbook')", max_length=100)),
                ("description", models.TextField(help_text="Detailed product description")),
                ("price", models.DecimalField(decimal_places=2, help_text="Price in USD", max_digits=10)),
                (
                    "discount_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, help_text="Discounted price (optional)", max_digits=10, null=True
                    ),
                ),
                (
                    "stock",
                    models.PositiveIntegerField(blank=True, help_text="Leave blank for digital products", null=True),
                ),
                (
                    "product_type",
                    models.CharField(
                        choices=[("physical", "Physical Product"), ("digital", "Digital Download")],
                        default="physical",
                        max_length=10,
                    ),
                ),
                (
                    "file",
                    models.FileField(blank=True, help_text="Required for digital products", upload_to="digital_goods/"),
                ),
                (
                    "category",
                    models.CharField(blank=True, help_text="e.g., 'Books', 'Course Materials'", max_length=100),
                ),
                ("is_available", models.BooleanField(default=True, help_text="Show/hide product from store")),
                ("is_reward", models.BooleanField(default=False, help_text="Can be unlocked as achievement reward")),
                (
                    "points_required",
                    models.PositiveIntegerField(blank=True, help_text="Points needed to unlock this reward", null=True),
                ),
                (
                    "sku",
                    models.CharField(
                        blank=True,
                        help_text="Inventory tracking ID (auto-generated)",
                        max_length=50,
                        null=True,
                        unique=True,
                    ),
                ),
                ("slug", models.SlugField(blank=True, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="MembershipPlan",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("slug", models.SlugField(blank=True, max_length=100, null=True, unique=True)),
                ("description", models.TextField()),
                ("price_monthly", models.DecimalField(decimal_places=2, max_digits=10)),
                ("price_yearly", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "billing_period",
                    models.CharField(
                        choices=[("monthly", "Monthly"), ("yearly", "Yearly"), ("both", "Both")],
                        default="monthly",
                        max_length=10,
                    ),
                ),
                ("features", models.JSONField(blank=True, default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("is_popular", models.BooleanField(default=False)),
                ("order", models.PositiveIntegerField(default=0, help_text="Order in which to display the plan")),
                ("stripe_monthly_price_id", models.CharField(blank=True, default="", max_length=100)),
                ("stripe_yearly_price_id", models.CharField(blank=True, default="", max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["order", "price_monthly"],
            },
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField(blank=True)),
                ("icon", models.CharField(blank=True, help_text="Font Awesome icon class", max_length=50)),
                ("order", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("content", markdownx.models.MarkdownxField()),
                ("excerpt", models.TextField(blank=True)),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True, help_text="Featured image for the blog post", upload_to="blog/images/"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("published", "Published"), ("archived", "Archived")],
                        default="draft",
                        max_length=10,
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated tags (e.g., 'python, django, web development')",
                        max_length=200,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BlogComment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.TextField()),
                ("is_approved", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="web.blogcomment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="comments", to="web.blogpost"
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Cart",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("session_key", models.CharField(blank=True, default="", max_length=40)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Challenge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "challenge_type",
                    models.CharField(
                        choices=[("weekly", "Weekly Challenge"), ("one_time", "One-time Challenge")],
                        default="weekly",
                        max_length=10,
                    ),
                ),
                ("week_number", models.PositiveIntegerField(blank=True, null=True)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("challenge_type", "weekly")),
                        fields=("week_number",),
                        name="unique_week_number_for_weekly_challenges",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ChallengeSubmission",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("submission_text", models.TextField()),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("points_awarded", models.PositiveIntegerField(default=10)),
                ("challenge", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.challenge")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Course image (will be resized to 300x300 pixels)",
                        upload_to="course_images",
                    ),
                ),
                ("description", markdownx.models.MarkdownxField()),
                ("learning_objectives", markdownx.models.MarkdownxField()),
                ("prerequisites", markdownx.models.MarkdownxField(blank=True)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "allow_individual_sessions",
                    models.BooleanField(default=False, help_text="Allow students to register for individual sessions"),
                ),
                (
                    "invite_only",
                    models.BooleanField(
                        default=False, help_text="If enabled, students can only enroll with an invitation"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("published", "Published"), ("archived", "Archived")],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("max_students", models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "level",
                    models.CharField(
                        choices=[("beginner", "Beginner"), ("intermediate", "Intermediate"), ("advanced", "Advanced")],
                        default="beginner",
                        max_length=20,
                    ),
                ),
                ("tags", models.CharField(blank=True, help_text="Comma-separated tags", max_length=200)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses_teaching",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="courses", to="web.subject"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("certificate_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("completion_date", models.DateField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certificates",
                        to="web.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("image", models.ImageField(upload_to="badges/")),
                (
                    "badge_type",
                    models.CharField(
                        choices=[
                            ("challenge", "Challenge Completion"),
                            ("course", "Course Completion"),
                            ("achievement", "Special Achievement"),
                            ("teacher_awarded", "Teacher Awarded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("criteria", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_badges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="badges",
                        to="web.challenge",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="badges",
                        to="web.course",
                    ),
                ),
            ],
            options={
                "ordering": ["badge_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="Achievement",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "achievement_type",
                    models.CharField(
                        choices=[
                            ("attendance", "Perfect Attendance"),
                            ("completion", "Course Completion"),
                            ("participation", "Active Participation"),
                            ("excellence", "Academic Excellence"),
                            ("quiz", "High Quiz Score"),
                            ("streak", "Daily Learning Streak"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("awarded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "badge_icon",
                    models.CharField(
                        blank=True, help_text="Icon class for the badge (e.g., 'fas fa-trophy')", max_length=100
                    ),
                ),
                (
                    "criteria_threshold",
                    models.PositiveIntegerField(
                        blank=True, help_text="Optional threshold required to earn this badge", null=True
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to="web.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Donation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("email", models.EmailField(max_length=254)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "donation_type",
                    models.CharField(
                        choices=[("one_time", "One-time Donation"), ("subscription", "Monthly Subscription")],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("stripe_payment_intent_id", models.CharField(blank=True, default="", max_length=100)),
                ("stripe_subscription_id", models.CharField(blank=True, default="", max_length=100)),
                ("stripe_customer_id", models.CharField(blank=True, default="", max_length=100)),
                ("message", models.TextField(blank=True)),
                ("anonymous", models.BooleanField(default=False)),
                ("award_points", models.BooleanField(default=True, help_text="Award points to user for donation")),
                (
                    "points_multiplier",
                    models.DecimalField(
                        decimal_places=2, default=1.0, help_text="Points per dollar multiplier", max_digits=5
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="donations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("completed", "Completed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("enrollment_date", models.DateTimeField(auto_now_add=True)),
                ("completion_date", models.DateTimeField(blank=True, null=True)),
                ("payment_intent_id", models.CharField(blank=True, default="", max_length=100)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="enrollments", to="web.course"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EventCalendar",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("month", models.IntegerField()),
                ("year", models.IntegerField()),
                ("share_token", models.CharField(max_length=32, unique=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_calendars",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ForumTopic",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                ("is_pinned", models.BooleanField(default=False)),
                ("is_locked", models.BooleanField(default=False)),
                ("views", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="forum_topics",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="topics", to="web.forumcategory"
                    ),
                ),
            ],
            options={
                "ordering": ["-is_pinned", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ForumReply",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.TextField()),
                ("is_solution", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="forum_replies",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="replies", to="web.forumtopic"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Forum Replies",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="GradeableLink",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("url", models.URLField()),
                ("description", models.TextField(blank=True)),
                (
                    "link_type",
                    models.CharField(
                        choices=[
                            ("pr", "Pull Request"),
                            ("article", "Article"),
                            ("website", "Website"),
                            ("project", "Project"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_links",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LearningStreak",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("current_streak", models.IntegerField(default=0)),
                ("longest_streak", models.IntegerField(default=0)),
                ("last_engagement", models.DateField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="learning_streak",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LinkGrade",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "grade",
                    models.CharField(
                        choices=[
                            ("A+", "A+"),
                            ("A", "A"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B", "B"),
                            ("B-", "B-"),
                            ("C+", "C+"),
                            ("C", "C"),
                            ("C-", "C-"),
                            ("D", "D"),
                            ("F", "F"),
                        ],
                        max_length=2,
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "link",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="grades", to="web.gradeablelink"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_grades",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NoteHistory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="note_history_entries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enrollment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="note_history", to="web.enrollment"
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                            ("error", "Error"),
                        ],
                        default="info",
                        max_length=10,
                    ),
                ),
                ("read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationPreference",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "reminder_days_before",
                    models.IntegerField(default=3, help_text="Days before deadline to send first reminder"),
                ),
                (
                    "reminder_hours_before",
                    models.IntegerField(default=24, help_text="Hours before deadline to send final reminder"),
                ),
                ("email_notifications", models.BooleanField(default=True)),
                ("in_app_notifications", models.BooleanField(default=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("total_price", models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending", "Pending Payment"),
                            ("processing", "Processing"),
                            ("shipped", "Shipped"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("refunded", "Refunded"),
                        ],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("shipping_address", models.JSONField(blank=True, help_text="Structured shipping details", null=True)),
                ("tracking_number", models.CharField(blank=True, max_length=100)),
                ("terms_accepted", models.BooleanField(default=False, help_text="User accepted terms during checkout")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="orders", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("quantity", models.PositiveIntegerField(default=1)),
                ("price_at_purchase", models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                (
                    "discounted_price_at_purchase",
                    models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=10, null=True),
                ),
                (
                    "goods",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="web.goods", verbose_name="Product"
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="items", to="web.order"
                    ),
                ),
            ],
            options={
                "verbose_name": "Order Line Item",
            },
        ),
        migrations.CreateModel(
            name="PeerConnection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("blocked", "Blocked"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PeerMessage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("content", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "receiver",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_messages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Points",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.PositiveIntegerField(default=0)),
                ("reason", models.CharField(help_text="Reason for awarding points", max_length=255)),
                (
                    "point_type",
                    models.CharField(
                        choices=[("regular", "Regular Points"), ("streak", "Streak Points"), ("bonus", "Bonus Points")],
                        default="regular",
                        max_length=20,
                    ),
                ),
                ("awarded_at", models.DateTimeField(auto_now_add=True)),
                ("current_streak", models.PositiveIntegerField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="points_awarded",
                        to="web.challenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="points", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Points",
            },
        ),
        migrations.CreateModel(
            name="ProductImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("image", models.ImageField(help_text="Product display image", upload_to="goods_images/")),
                (
                    "alt_text",
                    models.CharField(
                        blank=True, help_text="Accessibility description for screen readers", max_length=125
                    ),
                ),
                (
                    "goods",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="goods_images", to="web.goods"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="goods",
            name="images",
            field=models.ManyToManyField(blank=True, related_name="goods_images", to="web.productimage"),
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("expertise", models.CharField(blank=True, max_length=200)),
                ("avatar", models.ImageField(blank=True, default="", upload_to="avatars")),
                ("is_teacher", models.BooleanField(default=False)),
                ("referral_code", models.CharField(blank=True, max_length=20, unique=True)),
                ("referral_earnings", models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ("stripe_account_id", models.CharField(blank=True, max_length=100)),
                (
                    "stripe_account_status",
                    models.CharField(
                        blank=True,
                        choices=[("pending", "Pending"), ("verified", "Verified"), ("rejected", "Rejected")],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "commission_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=10.0,
                        help_text="Commission rate in percentage (e.g., 10.00 for 10%)",
                        max_digits=5,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_profile_public",
                    models.BooleanField(
                        default=False,
                        help_text="Toggle to make your profile public so your details and stats are visible.",
                    ),
                ),
                (
                    "how_did_you_hear_about_us",
                    models.TextField(blank=True, help_text="How did you hear about us? You can enter text or a link."),
                ),
                (
                    "custom_avatar",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="profile",
                        to="web.avatar",
                    ),
                ),
                (
                    "referred_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="referrals",
                        to="web.profile",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProgressTracker",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("current_value", models.IntegerField(default=0)),
                ("target_value", models.IntegerField()),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("blue-600", "Primary"),
                            ("green-600", "Success"),
                            ("yellow-600", "Warning"),
                            ("red-600", "Danger"),
                            ("gray-600", "Secondary"),
                        ],
                        default="blue-600",
                        max_length=20,
                    ),
                ),
                ("public", models.BooleanField(default=True)),
                ("embed_code", models.CharField(editable=False, max_length=36, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_trackers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("published", "Published"), ("private", "Private")],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "share_code",
                    models.CharField(
                        blank=True, help_text="Unique code for sharing the quiz", max_length=8, null=True, unique=True
                    ),
                ),
                (
                    "allow_anonymous",
                    models.BooleanField(
                        default=False, help_text="If enabled, users don't need to log in to take this quiz"
                    ),
                ),
                (
                    "show_correct_answers",
                    models.BooleanField(default=False, help_text="Show correct answers after quiz completion"),
                ),
                (
                    "randomize_questions",
                    models.BooleanField(default=False, help_text="Randomize the order of questions"),
                ),
                (
                    "time_limit",
                    models.PositiveIntegerField(blank=True, help_text="Time limit in minutes (optional)", null=True),
                ),
                (
                    "max_attempts",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of attempts allowed (leave blank for unlimited)",
                        null=True,
                    ),
                ),
                (
                    "passing_score",
                    models.PositiveIntegerField(default=70, help_text="Minimum percentage required to pass the quiz"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_quizzes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="quizzes", to="web.subject"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Quizzes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PeerChallenge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("completed", "Completed"), ("cancelled", "Cancelled")],
                        default="active",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_challenges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="peer_challenges", to="web.quiz"
                    ),
                ),
            ],
            options={
                "verbose_name": "Peer Challenge",
                "verbose_name_plural": "Peer Challenges",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QuizQuestion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("multiple", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("short", "Short Answer"),
                        ],
                        default="multiple",
                        max_length=10,
                    ),
                ),
                ("explanation", models.TextField(blank=True, help_text="Explanation of the correct answer")),
                ("points", models.PositiveIntegerField(default=1)),
                ("order", models.PositiveIntegerField(default=0)),
                ("image", models.ImageField(blank=True, default="", upload_to="quiz_questions/")),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="questions", to="web.quiz"
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="QuizOption",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.CharField(max_length=255)),
                ("is_correct", models.BooleanField(default=False)),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="options", to="web.quizquestion"
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("comment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="reviews", to="web.course"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews_given",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SearchLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("query", models.CharField(max_length=255)),
                ("results_count", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("filters_applied", models.JSONField(blank=True, default=dict)),
                (
                    "search_type",
                    models.CharField(
                        choices=[
                            ("course", "Course Search"),
                            ("material", "Material Search"),
                            ("forum", "Forum Search"),
                        ],
                        default="course",
                        max_length=20,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("is_virtual", models.BooleanField(default=True)),
                ("meeting_link", models.URLField(blank=True)),
                ("meeting_id", models.CharField(blank=True, max_length=100)),
                ("location", models.CharField(blank=True, max_length=200)),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price for individual session registration",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enable_rollover",
                    models.BooleanField(
                        default=False, help_text="Enable automatic date rollover if no students are enrolled"
                    ),
                ),
                (
                    "rollover_pattern",
                    models.CharField(
                        blank=True,
                        choices=[("daily", "Daily"), ("weekly", "Weekly"), ("monthly", "Monthly")],
                        default="weekly",
                        help_text="How often to roll over the session dates",
                        max_length=20,
                    ),
                ),
                (
                    "original_start_time",
                    models.DateTimeField(blank=True, help_text="Original start time before any rollovers", null=True),
                ),
                (
                    "original_end_time",
                    models.DateTimeField(blank=True, help_text="Original end time before any rollovers", null=True),
                ),
                (
                    "is_rolled_over",
                    models.BooleanField(default=False, help_text="Whether this session has been rolled over"),
                ),
                (
                    "teacher_confirmed",
                    models.BooleanField(
                        default=False, help_text="Whether the teacher has confirmed the rolled over dates"
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="sessions", to="web.course"
                    ),
                ),
            ],
            options={
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("currency", models.CharField(default="USD", max_length=3)),
                ("stripe_payment_intent_id", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "enrollment",
                    models.ForeignKey(
                        help_text="The enrollment this payment is associated with",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="web.enrollment",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specific session this payment is for, if any",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payments",
                        to="web.session",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CourseProgress",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "enrollment",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, related_name="progress", to="web.enrollment"
                    ),
                ),
                ("completed_sessions", models.ManyToManyField(related_name="completed_by", to="web.session")),
            ],
        ),
        migrations.CreateModel(
            name="CourseMaterial",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "material_type",
                    models.CharField(
                        choices=[
                            ("video", "Video"),
                            ("image", "Image"),
                            ("document", "Document"),
                            ("presentation", "Presentation"),
                            ("exercise", "Exercise"),
                            ("quiz", "Quiz"),
                            ("assignment", "Assignment"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("file", models.FileField(blank=True, upload_to="course_materials/")),
                ("external_url", models.URLField(blank=True, help_text="URL for external content like YouTube videos")),
                ("order", models.PositiveIntegerField(default=0)),
                ("is_downloadable", models.BooleanField(default=True)),
                (
                    "requires_enrollment",
                    models.BooleanField(
                        default=True, help_text="If True, only enrolled students can access full content"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "due_date",
                    models.DateTimeField(blank=True, help_text="Deadline for assignment submission", null=True),
                ),
                (
                    "reminder_sent",
                    models.BooleanField(default=False, help_text="Whether an early reminder has been sent"),
                ),
                (
                    "final_reminder_sent",
                    models.BooleanField(default=False, help_text="Whether a final reminder has been sent"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="materials", to="web.course"
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="materials",
                        to="web.session",
                    ),
                ),
            ],
            options={
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cart",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="items", to="web.cart"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart_items",
                        to="web.course",
                    ),
                ),
                (
                    "goods",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart_items",
                        to="web.goods",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cart_items",
                        to="web.session",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SessionAttendance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("present", "Present"),
                            ("absent", "Absent"),
                            ("excused", "Excused"),
                            ("late", "Late"),
                        ],
                        default="absent",
                        max_length=10,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="attendances", to="web.session"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_attendances",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SessionEnrollment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("payment_intent_id", models.CharField(blank=True, default="", max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="enrollments", to="web.session"
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="session_enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Storefront",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        default="Default Store Name",
                        help_text="Display name for your store",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True, help_text="Describe your store for customers")),
                (
                    "logo",
                    models.ImageField(blank=True, help_text="Recommended size: 200x200px", upload_to="store_logos/"),
                ),
                (
                    "store_slug",
                    models.SlugField(blank=True, help_text="Auto-generated URL-friendly identifier", unique=True),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Enable/disable public visibility of your store"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "teacher",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="storefront",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Teacher Profile",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="order",
            name="storefront",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orders",
                to="web.storefront",
            ),
        ),
        migrations.AddField(
            model_name="goods",
            name="storefront",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="goods", to="web.storefront"
            ),
        ),
        migrations.CreateModel(
            name="StudyGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("max_members", models.IntegerField(default=10)),
                ("is_private", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="study_groups", to="web.course"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(blank=True, related_name="joined_groups", to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudyGroupInvite",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("accepted", "Accepted"), ("declined", "Declined")],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="invites", to="web.studygroup"
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_group_invites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_group_invites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Meme",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(help_text="A descriptive title for the meme", max_length=200)),
                ("caption", models.TextField(blank=True, help_text="The text content of the meme")),
                (
                    "image",
                    models.ImageField(
                        help_text="Upload a meme image (JPG, PNG, or GIF, max 2MB)",
                        upload_to="memes/",
                        validators=[web.models.validate_image_size, web.models.validate_image_extension],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "uploader",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="memes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        help_text="The educational subject this meme relates to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="memes",
                        to="web.subject",
                    ),
                ),
            ],
            options={
                "verbose_name": "Meme",
                "verbose_name_plural": "Memes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EducationalVideo",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("video_url", models.URLField(help_text="URL for external content like YouTube videos")),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "uploader",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="educational_videos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="educational_videos", to="web.subject"
                    ),
                ),
            ],
            options={
                "verbose_name": "Educational Video",
                "verbose_name_plural": "Educational Videos",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="SuccessStory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(max_length=200, unique=True)),
                ("content", markdownx.models.MarkdownxField()),
                ("excerpt", models.TextField(blank=True)),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True,
                        help_text="Featured image for the success story",
                        upload_to="success_stories/images/",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("published", "Published"), ("archived", "Archived")],
                        default="published",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="success_stories",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Success Story",
                "verbose_name_plural": "Success Stories",
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TeamGoal",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("deadline", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("completed", "Completed"), ("cancelled", "Cancelled")],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_goals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeamGoalMember",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "role",
                    models.CharField(
                        choices=[("leader", "Team Leader"), ("member", "Team Member")], default="member", max_length=20
                    ),
                ),
                (
                    "team_goal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="members", to="web.teamgoal"
                    ),
                ),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name="TeamInvite",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("accepted", "Accepted"), ("declined", "Declined")],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "goal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="invites", to="web.teamgoal"
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_invites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_invites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TimeSlot",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("day", models.IntegerField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "calendar",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="time_slots", to="web.eventcalendar"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserBadge",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "award_method",
                    models.CharField(
                        choices=[
                            ("challenge_completion", "Challenge Completion"),
                            ("course_completion", "Course Completion"),
                            ("teacher_awarded", "Teacher Awarded"),
                            ("system_awarded", "System Awarded"),
                        ],
                        max_length=20,
                    ),
                ),
                ("awarded_at", models.DateTimeField(auto_now_add=True)),
                ("award_message", models.TextField(blank=True)),
                (
                    "awarded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="awarded_badges",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "badge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="awarded_to", to="web.badge"
                    ),
                ),
                (
                    "challenge_submission",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="badges",
                        to="web.challengesubmission",
                    ),
                ),
                (
                    "course_enrollment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="badges",
                        to="web.enrollment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="badges", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "ordering": ["-awarded_at"],
            },
        ),
        migrations.CreateModel(
            name="UserMembership",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("stripe_subscription_id", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("past_due", "Past Due"),
                            ("canceled", "Canceled"),
                            ("trialing", "Trialing"),
                            ("incomplete", "Incomplete"),
                            ("incomplete_expired", "Incomplete Expired"),
                            ("unpaid", "Unpaid"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                (
                    "billing_period",
                    models.CharField(
                        choices=[("monthly", "Monthly"), ("yearly", "Yearly")], default="monthly", max_length=10
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("cancel_at_period_end", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="subscriptions",
                        to="web.membershipplan",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="membership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MembershipSubscriptionEvent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("updated", "Updated"),
                            ("canceled", "Canceled"),
                            ("reactivated", "Reactivated"),
                            ("payment_succeeded", "Payment Succeeded"),
                            ("payment_failed", "Payment Failed"),
                            ("past_due", "Past Due"),
                        ],
                        max_length=20,
                    ),
                ),
                ("stripe_event_id", models.CharField(blank=True, default="", max_length=100)),
                ("data", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="membership_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "membership",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="events",
                        to="web.usermembership",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserQuiz",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "anonymous_id",
                    models.CharField(
                        blank=True, default="", help_text="Identifier for non-logged-in users", max_length=36
                    ),
                ),
                ("score", models.PositiveIntegerField(default=0)),
                ("max_score", models.PositiveIntegerField(default=0)),
                ("completed", models.BooleanField(default=False)),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                (
                    "answers",
                    models.JSONField(
                        blank=True, default=dict, help_text="JSON storing the user's answers and question IDs"
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="user_quizzes", to="web.quiz"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quiz_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User quiz attempts",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="PeerChallengeInvitation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("completed", "Completed"),
                            ("declined", "Declined"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="invitations", to="web.peerchallenge"
                    ),
                ),
                (
                    "participant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_invitations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_quiz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="challenge_invitation",
                        to="web.userquiz",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WebRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("ip_address", models.CharField(blank=True, default="", max_length=100)),
                ("user", models.CharField(blank=True, default="", max_length=150)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("agent", models.TextField(blank=True, default="")),
                ("count", models.BigIntegerField(default=1)),
                ("path", models.CharField(blank=True, default="", max_length=255)),
                ("referer", models.CharField(blank=True, default="", max_length=255)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="web_requests",
                        to="web.course",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="cart",
            constraint=models.CheckConstraint(
                condition=models.Q(("user__isnull", False), ("session_key__gt", ""), _connector="OR"),
                name="cart_user_or_session_key",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="challengesubmission",
            unique_together={("user", "challenge")},
        ),
        migrations.AlterUniqueTogether(
            name="enrollment",
            unique_together={("student", "course")},
        ),
        migrations.AlterUniqueTogether(
            name="linkgrade",
            unique_together={("link", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="orderitem",
            unique_together={("order", "goods")},
        ),
        migrations.AlterUniqueTogether(
            name="peerconnection",
            unique_together={("sender", "receiver")},
        ),
        migrations.AddIndex(
            model_name="points",
            index=models.Index(fields=["user", "awarded_at"], name="web_points_user_id_3acb2a_idx"),
        ),
        migrations.AddIndex(
            model_name="points",
            index=models.Index(fields=["awarded_at"], name="web_points_awarded_c490d6_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="review",
            unique_together={("student", "course")},
        ),
        migrations.AlterUniqueTogether(
            name="cartitem",
            unique_together={("cart", "course"), ("cart", "goods"), ("cart", "session")},
        ),
        migrations.AlterUniqueTogether(
            name="sessionattendance",
            unique_together={("session", "student")},
        ),
        migrations.AlterUniqueTogether(
            name="sessionenrollment",
            unique_together={("student", "session")},
        ),
        migrations.AlterUniqueTogether(
            name="studygroupinvite",
            unique_together={("group", "recipient")},
        ),
        migrations.AddIndex(
            model_name="meme",
            index=models.Index(fields=["-created_at"], name="web_meme_created_b43882_idx"),
        ),
        migrations.AddIndex(
            model_name="meme",
            index=models.Index(fields=["subject"], name="web_meme_subject_1b89ce_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="teamgoalmember",
            unique_together={("team_goal", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="teaminvite",
            unique_together={("goal", "recipient")},
        ),
        migrations.AlterUniqueTogether(
            name="timeslot",
            unique_together={("calendar", "name", "day")},
        ),
        migrations.AlterUniqueTogether(
            name="userbadge",
            unique_together={("user", "badge")},
        ),
        migrations.AlterUniqueTogether(
            name="peerchallengeinvitation",
            unique_together={("challenge", "participant")},
        ),
    ]
